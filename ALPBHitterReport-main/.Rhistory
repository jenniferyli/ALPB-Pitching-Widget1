#filter(PitchUID == "d3d499d0-2c0c-11ef-a6ae-b3e9f68a02eb") %>%
select(PlayID, PitchCall, TaggedHitType, PlayResult, Distance, Bearing) %>%
# mutate(
#   new_bearing = ifelse(Bearing < 0, abs(Bearing) + 90, Bearing)
# ) %>%
mutate(
ball_x_loc = ifelse(Bearing < 0, sin(abs(Bearing)) * Distance * -1, sin(abs(Bearing)) * Distance),
ball_y_loc = 2.5 * cos(abs(Bearing)) * Distance
)
geom_baseball("mlb", display_range = "full") + geom_point(data = hit_locations,aes(ball_x_loc, ball_y_loc))
hit_locations <- test %>%
#filter(PitchUID == "d3d499d0-2c0c-11ef-a6ae-b3e9f68a02eb") %>%
select(PlayID, PitchCall, TaggedHitType, PlayResult, Distance, Bearing) %>%
# mutate(
#   new_bearing = ifelse(Bearing < 0, abs(Bearing) + 90, Bearing)
# ) %>%
mutate(
ball_x_loc = (ifelse(Bearing < 0, sin(abs(Bearing)) * Distance * -1, sin(abs(Bearing)) * Distance)) - 125.42,
ball_y_loc = 198.27 - (cos(abs(Bearing)) * Distance)
)
geom_baseball("mlb", display_range = "full") + geom_point(data = hit_locations,aes(ball_x_loc, ball_y_loc))
ggplot() +
geom_point(data = hit_locations,aes(ball_x_loc, ball_y_loc)) +
coord_polar(theta = "x", start = pi, clip = "on")
hit_locations <- test %>%
#filter(PitchUID == "d3d499d0-2c0c-11ef-a6ae-b3e9f68a02eb") %>%
select(PlayID, PitchCall, TaggedHitType, PlayResult, Distance, Bearing) %>%
# mutate(
#   new_bearing = ifelse(Bearing < 0, abs(Bearing) + 90, Bearing)
# ) %>%
mutate(
ball_x_loc = sin(Bearing) * Distance,
ball_y_loc = cos(Bearing) * Distance
)
ggplot() +
geom_point(data = hit_locations,aes(ball_x_loc, ball_y_loc)) +
coord_polar(theta = "x", start = pi, clip = "on")
hit_locations <- test %>%
#filter(PitchUID == "d3d499d0-2c0c-11ef-a6ae-b3e9f68a02eb") %>%
select(PlayID, PitchCall, TaggedHitType, PlayResult, Distance, Bearing) %>%
# mutate(
#   new_bearing = ifelse(Bearing < 0, abs(Bearing) + 90, Bearing)
# ) %>%
mutate(
ball_x_loc = cos(Bearing) * Distance,
ball_y_loc = sin(Bearing) * Distance
)
ggplot() +
geom_point(data = hit_locations,aes(ball_x_loc, ball_y_loc)) +
coord_polar(theta = "x", start = pi, clip = "on")
mutate(
ball_x_loc = sin(Bearing) * Distance,
ball_y_loc = cos(Bearing) * Distance
)
hit_locations <- test %>%
#filter(PitchUID == "d3d499d0-2c0c-11ef-a6ae-b3e9f68a02eb") %>%
select(PlayID, PitchCall, TaggedHitType, PlayResult, Distance, Bearing) #%>%
# mutate(
#   new_bearing = ifelse(Bearing < 0, abs(Bearing) + 90, Bearing)
# ) %>%
# mutate(
#   ball_x_loc = sin(Bearing) * Distance,
#   ball_y_loc = cos(Bearing) * Distance
# )
ggplot() +
geom_point(data = hit_locations,aes(Bearing, Distance)) +
coord_polar(theta = "x", start = pi, clip = "on")
ggplot() +
geom_point(data = hit_locations,aes(Bearing, Distance)) +
coord_polar(theta = "x", start = pi, clip = "on") +
geom_baseball("mlb", display_range = "full")
ggplot() +
geom_point(data = hit_locations,aes(Bearing, Distance)) +
coord_polar(theta = "x", start = pi, clip = "on") +
xlim(-45,45)
ggplot(hit_locations, aes(x = Bearing, y = Distance)) +
# drawing an area for the playground
annotate(geom = "rect", xmin = 45, xmax = -45,
ymin = 0, ymax = Inf,
fill = "grey", alpha = 0.2) +
# add marks for the distances
annotate(geom = "text",
x = rep(50, 4), y = c(100, 200, 300, 400),
label = c("100", "200", "300", "400")) +
# add lines for the distance
annotate(geom = "segment",
x = rep(-45,4), xend = rep(45, 4),
y = c(100, 200, 300, 400), yend = c(100, 200, 300, 400),
linetype = "dotted") +
# show the results as points
geom_point(colour = "darkgreen", size = 3) +
# convert to polar
coord_polar(theta = "x", start = pi, clip = "on") +
theme_void() +
# adjust the axis
scale_x_continuous(limits = c(-180, 180),
ggplot(hit_locations, aes(x = Bearing, y = Distance)) +
# drawing an area for the playground
annotate(geom = "rect", xmin = 45, xmax = -45,
ymin = 0, ymax = Inf,
fill = "grey", alpha = 0.2) +
# add marks for the distances
annotate(geom = "text",
x = rep(50, 4), y = c(100, 200, 300, 400),
label = c("100", "200", "300", "400")) +
# add lines for the distance
annotate(geom = "segment",
x = rep(-45,4), xend = rep(45, 4),
y = c(100, 200, 300, 400), yend = c(100, 200, 300, 400),
linetype = "dotted") +
# show the results as points
geom_point(colour = "darkgreen", size = 3) +
# convert to polar
coord_polar(theta = "x", start = pi, clip = "on") +
theme_void() +
# adjust the axis
scale_x_continuous(limits = c(-180, 180)
ggplot(hit_locations, aes(x = Bearing, y = Distance)) +
# drawing an area for the playground
annotate(geom = "rect", xmin = 45, xmax = -45,
ymin = 0, ymax = Inf,
fill = "grey", alpha = 0.2) +
# add marks for the distances
annotate(geom = "text",
x = rep(50, 4), y = c(100, 200, 300, 400),
label = c("100", "200", "300", "400")) +
# add lines for the distance
annotate(geom = "segment",
x = rep(-45,4), xend = rep(45, 4),
y = c(100, 200, 300, 400), yend = c(100, 200, 300, 400),
linetype = "dotted") +
# show the results as points
geom_point(colour = "darkgreen", size = 3) +
# convert to polar
coord_polar(theta = "x", start = pi, clip = "on") +
theme_void() +
# adjust the axis
scale_x_continuous(limits = c(-180, 180))
View(hit_locations)
hit_locations <- test %>%
filter(!is.na(Distance)) %>%
#filter(PitchUID == "d3d499d0-2c0c-11ef-a6ae-b3e9f68a02eb") %>%
select(PlayID, PitchCall, TaggedHitType, PlayResult, Distance, Bearing) #%>%
# mutate(
#   new_bearing = ifelse(Bearing < 0, abs(Bearing) + 90, Bearing)
# ) %>%
# mutate(
#   ball_x_loc = sin(Bearing) * Distance,
#   ball_y_loc = cos(Bearing) * Distance
# )
ggplot(hit_locations, aes(x = Bearing, y = Distance)) +
# drawing an area for the playground
annotate(geom = "rect", xmin = 45, xmax = -45,
ymin = 0, ymax = Inf,
fill = "grey", alpha = 0.2) +
# add marks for the distances
annotate(geom = "text",
x = rep(50, 4), y = c(100, 200, 300, 400),
label = c("100", "200", "300", "400")) +
# add lines for the distance
annotate(geom = "segment",
x = rep(-45,4), xend = rep(45, 4),
y = c(100, 200, 300, 400), yend = c(100, 200, 300, 400),
linetype = "dotted") +
# show the results as points
geom_point(colour = "darkgreen", size = 3) +
# convert to polar
coord_polar(theta = "x", start = pi, clip = "on") +
theme_void() +
# adjust the axis
scale_x_continuous(limits = c(-180, 180))
hit_locations <- test %>%
filter(!is.na(Distance) & PitchCall == "InPlay") %>%
#filter(PitchUID == "d3d499d0-2c0c-11ef-a6ae-b3e9f68a02eb") %>%
select(PlayID, PitchCall, TaggedHitType, PlayResult, Distance, Bearing) #%>%
# mutate(
#   new_bearing = ifelse(Bearing < 0, abs(Bearing) + 90, Bearing)
# ) %>%
# mutate(
#   ball_x_loc = sin(Bearing) * Distance,
#   ball_y_loc = cos(Bearing) * Distance
# )
ggplot(hit_locations, aes(x = Bearing, y = Distance)) +
# drawing an area for the playground
annotate(geom = "rect", xmin = 45, xmax = -45,
ymin = 0, ymax = Inf,
fill = "grey", alpha = 0.2) +
# add marks for the distances
annotate(geom = "text",
x = rep(50, 4), y = c(100, 200, 300, 400),
label = c("100", "200", "300", "400")) +
# add lines for the distance
annotate(geom = "segment",
x = rep(-45,4), xend = rep(45, 4),
y = c(100, 200, 300, 400), yend = c(100, 200, 300, 400),
linetype = "dotted") +
# show the results as points
geom_point(colour = "darkgreen", size = 3) +
# convert to polar
coord_polar(theta = "x", start = pi, clip = "on") +
theme_void() +
# adjust the axis
scale_x_continuous(limits = c(-180, 180))
geom_test <- hit_locations %>%
mutate(
ball_x_loc = sin(Bearing) * Distance,
ball_y_loc = cos(Bearing) * Distance
)
geom_baseball("mlb", display_range = "full") + geom_point(data = geom_test,aes(ball_x_loc, ball_y_loc))
geom_test <- hit_locations %>%
mutate(
ball_x_loc = cos(Bearing) * Distance,
ball_y_loc = sin(Bearing) * Distance
)
geom_baseball("mlb", display_range = "full") + geom_point(data = geom_test,aes(ball_x_loc, ball_y_loc))
ggplot(hit_locations, aes(x = Bearing, y = Distance)) +
# drawing an area for the playground
annotate(geom = "rect", xmin = 45, xmax = -45,
ymin = 0, ymax = Inf,
fill = "grey", alpha = 0.2) +
# add marks for the distances
annotate(geom = "text",
x = rep(50, 4), y = c(100, 200, 300, 400),
label = c("100", "200", "300", "400")) +
# add lines for the distance
annotate(geom = "segment",
x = rep(-45,4), xend = rep(45, 4),
y = c(100, 200, 300, 400), yend = c(100, 200, 300, 400),
linetype = "dotted") +
# show the results as points
geom_point(colour = "darkgreen", size = 3) +
# convert to polar
coord_polar(theta = "x", start = pi, clip = "on") +
theme_void() +
# adjust the axis
scale_x_continuous(limits = c(-180, 180))
geom_test <- hit_locations %>%
mutate(
ball_x_loc = cos(Bearing) * Distance,
ball_y_loc = sin(Bearing) * Distance
) %>%
mutate(
x = 2.5 * (ball_x_loc - 125.42),
y = 2.5 * (198.27 - ball_y_loc)
)
geom_baseball("mlb", display_range = "full") + geom_point(data = geom_test,aes(x, y))
geom_test <- hit_locations %>%
mutate(
ball_x_loc = sin(Bearing) * Distance,
ball_y_loc = cos(Bearing) * Distance
) %>%
mutate(
x = 2.5 * (ball_x_loc - 125.42),
y = 2.5 * (198.27 - ball_y_loc)
)
geom_baseball("mlb", display_range = "full") + geom_point(data = geom_test,aes(x, y))
geom_test <- hit_locations %>%
mutate(
bearing_rad <- Bearing * pi / 180
)
mutate(
ball_x_loc = sin(bearing_rad) * Distance,
ball_y_loc = cos(bearing_rad) * Distance
) %>%
mutate(
x = 2.5 * (ball_x_loc - 125.42),
y = 2.5 * (198.27 - ball_y_loc)
)
geom_test <- hit_locations %>%
mutate(
bearing_rad <- Bearing * pi / 180
) %>%
mutate(
ball_x_loc = sin(bearing_rad) * Distance,
ball_y_loc = cos(bearing_rad) * Distance
) %>%
mutate(
x = 2.5 * (ball_x_loc - 125.42),
y = 2.5 * (198.27 - ball_y_loc)
)
geom_test <- hit_locations %>%
mutate(
bearing_rad = Bearing * pi / 180
) %>%
mutate(
ball_x_loc = sin(bearing_rad) * Distance,
ball_y_loc = cos(bearing_rad) * Distance
) %>%
mutate(
x = 2.5 * (ball_x_loc - 125.42),
y = 2.5 * (198.27 - ball_y_loc)
)
geom_baseball("mlb", display_range = "full") + geom_point(data = geom_test,aes(x, y))
geom_test <- hit_locations %>%
mutate(
bearing_rad = Bearing * pi / 180
) %>%
mutate(
ball_x_loc = sin(bearing_rad) * Distance,
ball_y_loc = cos(bearing_rad) * Distance
)
geom_baseball("mlb", display_range = "full") + geom_point(data = geom_test,aes(ball_x_loc, ball_y_loc))
x <- seq(1, 10, length.out = 50)
y <- seq(1, 10, length.out = 50)
z <- outer(x, y, function(x, y) exp(-((x-5)^2 + (y-5)^2)/8))
# Create a data frame
df <- expand.grid(x = x, y = y)
df$z <- as.vector(z)
# Create the plot
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
scale_fill_gradientn(colors = c("blue", "green", "yellow", "red")) +
theme_minimal() +
# Add a black border (adjust coordinates as needed)
geom_rect(aes(xmin = 3, xmax = 7, ymin = 3, ymax = 7),
fill = NA, color = "black", size = 1) +
# Add the shape at the bottom (adjust as needed)
geom_polygon(data = data.frame(x = c(4, 6, 5), y = c(0, 0, 1)),
aes(x, y), fill = "black", inherit.aes = FALSE)
library(ggplot2)
x <- seq(1, 10, length.out = 50)
y <- seq(1, 10, length.out = 50)
z <- outer(x, y, function(x, y) exp(-((x-5)^2 + (y-5)^2)/8))
# Create a data frame
df <- expand.grid(x = x, y = y)
df$z <- as.vector(z)
# Create the plot
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
scale_fill_gradientn(colors = c("blue", "green", "yellow", "red")) +
theme_minimal() +
# Add a black border (adjust coordinates as needed)
geom_rect(aes(xmin = 3, xmax = 7, ymin = 3, ymax = 7),
fill = NA, color = "black", size = 1) +
# Add the shape at the bottom (adjust as needed)
geom_polygon(data = data.frame(x = c(4, 6, 5), y = c(0, 0, 1)),
aes(x, y), fill = "black", inherit.aes = FALSE)
library(spatstat)
install.packages("spatstat")
library(spatstat)
library(ggplot2)
# Create a point pattern
set.seed(123)
pp <- rpoispp(function(x, y) {
100 * exp(-((x-0.5)^2 + (y-0.5)^2) / 0.05)
}, win = owin(c(0,1), c(0,1)))
# Create a density map
dens <- density(pp, sigma = 0.05, dimyx = 100)
# Convert to a data frame for ggplot
df <- as.data.frame(dens)
# Create the plot
ggplot(df, aes(x, y, fill = value)) +
geom_raster(interpolate = TRUE) +
scale_fill_gradientn(colors = c("blue", "green", "yellow", "red"),
limits = c(0, max(df$value)),
oob = scales::squish) +
theme_minimal() +
theme(legend.position = "none") +
coord_fixed() +
# Add a black border (adjust coordinates as needed)
geom_rect(aes(xmin = 0.3, xmax = 0.7, ymin = 0.3, ymax = 0.7),
fill = NA, color = "black", size = 1) +
# Add the shape at the bottom (adjust as needed)
geom_polygon(data = data.frame(x = c(0.4, 0.6, 0.5), y = c(0, 0, 0.1)),
aes(x, y), fill = "black", inherit.aes = FALSE)
library(spatstat)
library(ggplot2)
# Create a more concentrated point pattern
set.seed(123)
pp <- rpoispp(function(x, y) {
1000 * exp(-((x-0.5)^2 + (y-0.5)^2) / 0.02)
}, win = owin(c(0,1), c(0,1)))
# Create a density map with higher resolution
dens <- density(pp, sigma = 0.03, dimyx = 200)
# Convert to a data frame for ggplot
df <- as.data.frame(dens)
# Set a threshold for transparency
threshold <- quantile(df$value, 0.1)
df$value[df$value < threshold] <- NA
# Create the plot
ggplot(df, aes(x, y, fill = value)) +
geom_raster(interpolate = TRUE) +
scale_fill_gradientn(colors = c("white", "lightblue", "blue", "green", "yellow", "red"),
na.value = "white",
limits = c(threshold, max(df$value)),
oob = scales::squish) +
theme_minimal() +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank()) +
coord_fixed() +
# Add a black border
geom_rect(aes(xmin = 0.3, xmax = 0.7, ymin = 0.3, ymax = 0.7),
fill = NA, color = "black", size = 1) +
# Add the shape at the bottom
geom_polygon(data = data.frame(x = c(0.4, 0.6, 0.5), y = c(0, 0, 0.1)),
aes(x, y), fill = "black", inherit.aes = FALSE)
library(fields)
install.packages("fields")
library(fields)
library(ggplot2)
# Create a grid
n <- 200
x <- y <- seq(0, 1, length.out = n)
grid <- expand.grid(x = x, y = y)
# Create multiple Gaussian peaks
set.seed(123)
peaks <- data.frame(
x = runif(5, 0.2, 0.8),
y = runif(5, 0.2, 0.8),
amplitude = runif(5, 0.5, 1),
sigma = runif(5, 0.05, 0.1)
)
# Calculate the heat values
calculate_heat <- function(x, y) {
sum(peaks$amplitude * exp(-((x - peaks$x)^2 + (y - peaks$y)^2) / (2 * peaks$sigma^2)))
}
grid$z <- mapply(calculate_heat, grid$x, grid$y)
# Normalize and apply threshold
grid$z <- (grid$z - min(grid$z)) / (max(grid$z) - min(grid$z))
threshold <- 0.1
grid$z[grid$z < threshold] <- NA
# Create the plot
ggplot(grid, aes(x, y, fill = z)) +
geom_raster(interpolate = TRUE) +
scale_fill_gradientn(colors = c("white", "lightblue", "blue", "green", "yellow", "red"),
na.value = "white",
limits = c(threshold, 1),
oob = scales::squish) +
theme_minimal() +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank()) +
coord_fixed() +
# Add a black border
geom_rect(aes(xmin = 0.3, xmax = 0.7, ymin = 0.3, ymax = 0.7),
fill = NA, color = "black", size = 1) +
# Add the shape at the bottom
geom_polygon(data = data.frame(x = c(0.4, 0.6, 0.5), y = c(0, 0, 0.1)),
aes(x, y), fill = "black", inherit.aes = FALSE)
library(ggplot2)
# Create sample data (replace this with your actual data)
x <- seq(1, 10, length.out = 50)
y <- seq(1, 10, length.out = 50)
z <- outer(x, y, function(x, y) exp(-((x-5)^2 + (y-5)^2)/8))
# Create a data frame
df <- expand.grid(x = x, y = y)
df$z <- as.vector(z)
# Create the plot
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
scale_fill_gradientn(colors = c("white", "lightblue", "blue", "green", "yellow", "red")) +
theme_minimal() +
# Add a black border (adjust coordinates as needed)
geom_rect(aes(xmin = 3, xmax = 7, ymin = 3, ymax = 7),
fill = NA, color = "black", size = 1) +
# Add the shape at the bottom (adjust as needed)
geom_polygon(data = data.frame(x = c(4, 6, 5), y = c(0, 0, 1)),
aes(x, y), fill = "black", inherit.aes = FALSE)
library(ggplot2)
# Create sample data (replace this with your actual data)
x <- seq(1, 10, length.out = 50)
y <- seq(1, 10, length.out = 50)
z <- outer(x, y, function(x, y) exp(-((x-5)^2 + (y-5)^2)/8))
# Create a data frame
df <- expand.grid(x = x, y = y)
df$z <- as.vector(z)
# Create the plot
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
scale_fill_gradientn(colors = c("white", "blue", "green", "yellow", "red")) +
theme_minimal() +
# Add a black border (adjust coordinates as needed)
geom_rect(aes(xmin = 3, xmax = 7, ymin = 3, ymax = 7),
fill = NA, color = "black", size = 1) +
# Add the shape at the bottom (adjust as needed)
geom_polygon(data = data.frame(x = c(4, 6, 5), y = c(0, 0, 1)),
aes(x, y), fill = "black", inherit.aes = FALSE)
library(ggplot2)
# Create sample data (replace this with your actual data)
x <- seq(1, 10, length.out = 50)
y <- seq(1, 10, length.out = 50)
z <- outer(x, y, function(x, y) exp(-((x-5)^2 + (y-5)^2)/8))
# Create a data frame
df <- expand.grid(x = x, y = y)
df$z <- as.vector(z)
# Create the plot
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
scale_fill_gradientn(colors = c("white", "white", "blue", "green", "yellow", "red")) +
theme_minimal() +
# Add a black border (adjust coordinates as needed)
geom_rect(aes(xmin = 3, xmax = 7, ymin = 3, ymax = 7),
fill = NA, color = "black", size = 1) +
# Add the shape at the bottom (adjust as needed)
geom_polygon(data = data.frame(x = c(4, 6, 5), y = c(0, 0, 1)),
aes(x, y), fill = "black", inherit.aes = FALSE)
library(shiny); runApp('renderHitterShinyApp.R')
runApp('renderHitterShinyApp.R')
runApp('renderHitterShinyApp.R')
runApp('renderHitterShinyApp.R')
library(shiny); runApp('renderHitterShinyApp.R')
library(shiny); runApp('renderHitterShinyApp.R')
runApp('renderHitterShinyApp.R')
runApp('renderHitterShinyApp.R')
runApp('renderHitterShinyApp.R')
library(shiny); runApp('renderHitterShinyAppFINAL.R')
library(shiny); runApp('renderHitterShinyAppFINAL.R')
runApp('renderHitterShinyAppFINAL.R')
runApp('renderHitterShinyAppFINAL.R')
