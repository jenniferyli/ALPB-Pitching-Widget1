json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Check and extract info
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_handedness
))
} else {
return(tibble(
player_id = NA,
pitching_hand = NA
))
}
}
get_alpb_pitcher_info("Casad", "Cooper")
library(httr)
library(jsonlite)
# === Function to query ALPB by first/last name ===
get_alpb_pitcher_info <- function(fname, lname) {
# Construct player_name in ALPB format
query_name <- paste0(lname, ", ", fname)
# API setup
alpb_api_key <- "IuHgm3smV65kbC6lMlMLz80DOeEkGSiV6USoQhvZ"
url <- "https://1ywv9dczq5.execute-api.us-east-2.amazonaws.com/ALPBAPI/players"
# API call
res <- GET(
url,
query = list(player_name = query_name),
add_headers(`x-api-key` = alpb_api_key)
)
# Parse safely
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Check and extract info
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_handedness
))
} else {
return(tibble(
player_id = NA,
pitching_hand = NA
))
}
}
get_alpb_pitcher_info("Cooper", "Casad")
library(httr)
library(jsonlite)
library(dplyr)
# === STEP 1: Get all teams for the 2025 Spring Training season ===
# Season and API details
seasonid <- "34104"
apikey <- "vIpQsngDfc6Y7WVgAcTt"
# Request JSON from API
url <- "https://api.pointstreak.com/baseball/league/structure/174/json"
headers <- add_headers(apikey = apikey)
params <- list(seasonid = seasonid)
res <- GET(url, headers, query = params)
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Get just the season with ID 34104
season <- Filter(function(s) s$seasonid == seasonid, parsed$league$season)[[1]]
# Extract and flatten all teams from all divisions
teams <- do.call(c, lapply(season$division, function(div) div$team))
team_df <- bind_rows(teams)
# Print team list
print(team_df)
# === STEP 2: Helper to pull players for one team ===
safe_extract <- function(field) {
if (is.null(field)) return(NA)
if (is.list(field)) return(as.character(unlist(field)))
return(as.character(field))
}
get_players_for_team <- function(team) {
teamlinkid <- team$teamlinkid
teamname <- team$teamname
url <- paste0("https://api.pointstreak.com/baseball/team/roster/", teamlinkid, "/", seasonid, "/json")
res <- GET(url, add_headers(apikey = apikey))
if (status_code(res) != 200) return(NULL)
json_text <- content(res, as = "text", encoding = "UTF-8")
parsed_json <- fromJSON(json_text, simplifyDataFrame = FALSE)
players <- parsed_json$league$player
if (is.null(players)) return(NULL)
bind_rows(lapply(players, function(p) {
tibble(
playerid = safe_extract(p$playerid),
playerlinkid = safe_extract(p$playerlinkid),
fname = safe_extract(p$fname),
lname = safe_extract(p$lname),
position = safe_extract(p$position),
height = safe_extract(p$height),
weight = safe_extract(p$weight),
birthday = safe_extract(p$birthday),
bats = safe_extract(p$bats),
throws = safe_extract(p$throws),
hometown = safe_extract(p$hometown),
photo = safe_extract(p$photo),
teamlinkid = teamlinkid,
teamname = teamname
)
}))
}
# === STEP 3: Loop through all teams and build the full player data ===
all_players_df <- bind_rows(lapply(teams, get_players_for_team))
pitchers_df <- all_players_df %>%
filter(position == "P") %>%
arrange(lname)
# View sorted list
print(pitchers_df)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
library(httr)
library(jsonlite)
# === Function to query ALPB by first/last name ===
get_alpb_pitcher_info <- function(fname, lname) {
# Construct player_name in ALPB format
query_name <- paste0(lname, ", ", fname)
# API setup
alpb_api_key <- "IuHgm3smV65kbC6lMlMLz80DOeEkGSiV6USoQhvZ"
url <- "https://1ywv9dczq5.execute-api.us-east-2.amazonaws.com/ALPBAPI/players"
# API call
res <- GET(
url,
query = list(player_name = query_name),
add_headers(`x-api-key` = alpb_api_key)
)
# Parse safely
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Check and extract info
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_handedness
))
} else {
return(tibble(
player_id = NA,
pitching_hand = NA
))
}
}
get_alpb_pitcher_info("Daniel", "Corcino")
library(httr)
library(jsonlite)
# === Function to query ALPB by first/last name ===
get_alpb_pitcher_info <- function(fname, lname) {
# Construct player_name in ALPB format
query_name <- paste0(lname, ", ", fname)
# API setup
alpb_api_key <- "IuHgm3smV65kbC6lMlMLz80DOeEkGSiV6USoQhvZ"
url <- "https://1ywv9dczq5.execute-api.us-east-2.amazonaws.com/ALPBAPI/players"
# API call
res <- GET(
url,
query = list(player_name = query_name),
add_headers(`x-api-key` = alpb_api_key)
)
# Parse safely
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Check and extract info
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_handedness
))
} else {
return(tibble(
player_id = NA,
pitching_hand = NA
))
}
}
get_alpb_pitcher_info("Brad", "Case")
library(httr)
library(jsonlite)
# === Function to query ALPB by first/last name ===
get_alpb_pitcher_info <- function(fname, lname) {
# Construct player_name in ALPB format
query_name <- paste0(lname, ", ", fname)
# API setup
alpb_api_key <- "IuHgm3smV65kbC6lMlMLz80DOeEkGSiV6USoQhvZ"
url <- "https://1ywv9dczq5.execute-api.us-east-2.amazonaws.com/ALPBAPI/players"
# API call
res <- GET(
url,
query = list(player_name = query_name),
add_headers(`x-api-key` = alpb_api_key)
)
# Parse safely
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Check and extract info
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_handedness
))
} else {
return(tibble(
player_id = NA,
pitching_hand = NA
))
}
}
get_alpb_pitcher_info("Brad", "Case")
Corcino
library(httr)
library(jsonlite)
# === Function to query ALPB by first/last name ===
get_alpb_pitcher_info <- function(fname, lname) {
# Construct player_name in ALPB format
query_name <- paste0(lname, ", ", fname)
# API setup
alpb_api_key <- "IuHgm3smV65kbC6lMlMLz80DOeEkGSiV6USoQhvZ"
url <- "https://1ywv9dczq5.execute-api.us-east-2.amazonaws.com/ALPBAPI/players"
# API call
res <- GET(
url,
query = list(player_name = query_name),
add_headers(`x-api-key` = alpb_api_key)
)
# Parse safely
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Check and extract info
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_handedness
))
} else {
return(tibble(
player_id = NA,
pitching_hand = NA
))
}
}
get_alpb_pitcher_info("Daniel", "Corcino")
library(httr)
library(jsonlite)
# === Function to query ALPB by first/last name ===
get_alpb_pitcher_info <- function(fname, lname) {
# Construct player_name in ALPB format
query_name <- paste0(lname, ", ", fname)
# API setup
alpb_api_key <- "IuHgm3smV65kbC6lMlMLz80DOeEkGSiV6USoQhvZ"
url <- "https://1ywv9dczq5.execute-api.us-east-2.amazonaws.com/ALPBAPI/players"
# API call
res <- GET(
url,
query = list(player_name = query_name),
add_headers(`x-api-key` = alpb_api_key)
)
# Parse safely
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Check and extract info
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_handedness
))
} else {
return(tibble(
player_id = NA,
pitching_hand = NA
))
}
}
get_alpb_pitcher_info("Brad", "Case")
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getALPBdata.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
get_alpb_pitcher_info("Justin", "Alintoff")
library(httr)
library(jsonlite)
# === Function to query ALPB by first/last name ===
get_alpb_pitcher_info <- function(fname, lname) {
# Construct player_name in ALPB format
query_name <- paste0(lname, ", ", fname)
# API setup
alpb_api_key <- "IuHgm3smV65kbC6lMlMLz80DOeEkGSiV6USoQhvZ"
url <- "https://1ywv9dczq5.execute-api.us-east-2.amazonaws.com/ALPBAPI/players"
# API call
res <- GET(
url,
query = list(player_name = query_name),
add_headers(`x-api-key` = alpb_api_key)
)
# Parse safely
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Check and extract info
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_handedness
))
} else {
return(tibble(
player_id = NA,
pitching_hand = NA
))
}
}
get_alpb_pitcher_info("Castillo", "Wilton")
library(httr)
library(jsonlite)
# === Function to query ALPB by first/last name ===
get_alpb_pitcher_info <- function(fname, lname) {
# Construct player_name in ALPB format
query_name <- paste0(lname, ", ", fname)
# API setup
alpb_api_key <- "IuHgm3smV65kbC6lMlMLz80DOeEkGSiV6USoQhvZ"
url <- "https://1ywv9dczq5.execute-api.us-east-2.amazonaws.com/ALPBAPI/players"
# API call
res <- GET(
url,
query = list(player_name = query_name),
add_headers(`x-api-key` = alpb_api_key)
)
# Parse safely
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Check and extract info
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_handedness
))
} else {
return(tibble(
player_id = NA,
pitching_hand = NA
))
}
}
get_alpb_pitcher_info("Castillo", "Wilton")
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getALPBdata.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getALPBdata.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getALPBdata.R", echo=TRUE)
library(httr)
library(jsonlite)
# === Function to query ALPB by first/last name ===
get_alpb_pitcher_info <- function(fname, lname) {
# Construct player_name in ALPB format
query_name <- paste0(lname, ", ", fname)
# API setup
alpb_api_key <- "IuHgm3smV65kbC6lMlMLz80DOeEkGSiV6USoQhvZ"
url <- "https://1ywv9dczq5.execute-api.us-east-2.amazonaws.com/ALPBAPI/players"
# API call
res <- GET(
url,
query = list(player_name = query_name),
add_headers(`x-api-key` = alpb_api_key)
)
# Parse safely
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Check and extract info
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_handedness
))
} else {
return(tibble(
player_id = NA,
pitching_hand = NA
))
}
}
get_alpb_pitcher_info("Beggs", "Dustin")
get_alpb_pitcher_info("Beggs", "Dustin")
get_alpb_pitcher_info("Dustin", "Beggs")
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
library(httr)
library(jsonlite)
library(dplyr)
# === STEP 1: Get all teams for the 2025 Spring Training season ===
# Season and API details
seasonid <- "34104"
apikey <- "vIpQsngDfc6Y7WVgAcTt"
# Request JSON from API
url <- "https://api.pointstreak.com/baseball/league/structure/174/json"
headers <- add_headers(apikey = apikey)
params <- list(seasonid = seasonid)
res <- GET(url, headers, query = params)
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Get just the season with ID 34104
season <- Filter(function(s) s$seasonid == seasonid, parsed$league$season)[[1]]
# Extract and flatten all teams from all divisions
teams <- do.call(c, lapply(season$division, function(div) div$team))
team_df <- bind_rows(teams)
# Print team list
print(team_df)
# === STEP 2: Helper to pull players for one team ===
safe_extract <- function(field) {
if (is.null(field)) return(NA)
if (is.list(field)) return(as.character(unlist(field)))
return(as.character(field))
}
get_players_for_team <- function(team) {
teamlinkid <- team$teamlinkid
teamname <- team$teamname
url <- paste0("https://api.pointstreak.com/baseball/team/roster/", teamlinkid, "/", seasonid, "/json")
res <- GET(url, add_headers(apikey = apikey))
if (status_code(res) != 200) return(NULL)
json_text <- content(res, as = "text", encoding = "UTF-8")
parsed_json <- fromJSON(json_text, simplifyDataFrame = FALSE)
players <- parsed_json$league$player
if (is.null(players)) return(NULL)
bind_rows(lapply(players, function(p) {
tibble(
playerid = safe_extract(p$playerid),
playerlinkid = safe_extract(p$playerlinkid),
fname = safe_extract(p$fname),
lname = safe_extract(p$lname),
position = safe_extract(p$position),
height = safe_extract(p$height),
weight = safe_extract(p$weight),
birthday = safe_extract(p$birthday),
bats = safe_extract(p$bats),
throws = safe_extract(p$throws),
hometown = safe_extract(p$hometown),
photo = safe_extract(p$photo),
teamlinkid = teamlinkid,
teamname = teamname
)
}))
}
# === STEP 3: Loop through all teams and build the full player data ===
all_players_df <- bind_rows(lapply(teams, get_players_for_team))
pitchers_df <- all_players_df %>%
filter(position == "P") %>%
filter(!teamname %in% c("Staten Island Ferry Hawks", "Long Island Black Sox")) %>%
arrange(lname)
# View sorted list
print(pitchers_df)
# === STEP 4: Load ALPB lookup function ===
source("getALPBdata.R")  # Make sure this points to your actual script location
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
setwd("/Users/jenniferl/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny")
ls
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getALPBdata.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getALPBdata.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getALPBdata.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getALPBdata.R", echo=TRUE)
library(httr)
library(jsonlite)
library(tibble)
get_alpb_pitcher_info <- function(fname, lname) {
# Construct player_name in ALPB format
query_name <- paste0(lname, ", ", fname)
# API setup
alpb_api_key <- "IuHgm3smV65kbC6lMlMLz80DOeEkGSiV6USoQhvZ"
url <- "https://1yvw9dczq5.execute-api.us-east-2.amazonaws.com/ALPBAPI/players"
# API call
res <- GET(
url,
query = list(player_name = query_name),
add_headers(`x-api-key` = alpb_api_key)
)
json_data <- content(res, as = "text", encoding = "UTF-8")
parsed <- fromJSON(json_data, simplifyDataFrame = FALSE)
# Handle case when player is not found (empty data)
if (length(parsed$data) == 0) {
cat("❌ NOT FOUND:", query_name, "\n")
return(tibble(player_id = NA, pitching_hand = NA))
}
player <- parsed$data[[1]]
if (!is.null(player) && isTRUE(player$is_pitcher)) {
return(tibble(
player_id = player$player_id,
pitching_hand = player$player_pitching_hand
))
} else {
cat("⚠️ Not a pitcher in ALPB:", query_name, "\n")
return(tibble(player_id = NA, pitching_hand = NA))
}
}
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getALPBdata.R", echo=TRUE)
get_alpb_pitcher_info
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getALPBdata.R", echo=TRUE)
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
get_alpb_pitcher_info("Wilton", "Castillo")
runApp()
source("~/Documents/School/JHU/research/alpbWidget/ALPB-Pitching-Widget2/ALPB-Pitching-Widget1/newShiny/getPointstreakPlayers.R", echo=TRUE)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
clc
clear
shinyApp(ui = ui, server = server)
